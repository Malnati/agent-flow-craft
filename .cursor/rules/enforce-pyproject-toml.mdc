---
description: Regra para centralização de dependências no pyproject.toml e padronização de instalações
globs: 
alwaysApply: true
---
# Regra de Consolidação de Dependências Python

Objetivo:
Garantir a centralização e a padronização da gestão de dependências do projeto de forma moderna e sustentável, facilitando o uso de ferramentas como uv, pip, poetry, build, twine, entre outras.

⸻

✅ Regra para Declaração de Dependências
	•	Todas as dependências do projeto devem estar exclusivamente no arquivo pyproject.toml localizado na raiz do repositório.
	•	Não é permitido utilizar setup.py, requirements.txt, requirements-dev.txt, requirements.in, nem setup.cfg para declarar dependências.
	•	O pyproject.toml deve conter:
		•	Seção [project] com dependencies (produção) e optional-dependencies.dev (desenvolvimento)
		•	Seção [build-system] compatível com setuptools e wheel (ou outro backend adotado)
	•	O arquivo pyproject.toml deve ser validado com ferramentas como uv pip check ou pip check.

⸻

✅ Regra para Instalação de Dependências
	•	Todas as instalações de dependências devem ser feitas através do pyproject.toml, usando comandos como:
		•	`pip install -e .` para instalar dependências de produção
		•	`pip install -e .[dev]` para instalar dependências de desenvolvimento
	•	Não é permitido instalar pacotes individuais diretamente (ex: `pip install package`), todos devem estar no pyproject.toml
	•	No Makefile e demais scripts de automação, sempre usar instalação via pyproject.toml:
		•	Substituir instalações pontuais por instalações via projeto
		•	Centralizar a gestão de versões no pyproject.toml
	•	Exceções só são permitidas para ferramentas de bootstrap inicial que não podem ser instaladas via pyproject.toml

⸻

❌ Práticas Proibidas
	•	Instalar pacotes diretamente com `pip install package` em scripts ou Makefile
	•	Manter arquivos requirements.txt paralelos
	•	Definir dependências em múltiplos locais
	•	Omitir informações de versão nas declarações de dependências

